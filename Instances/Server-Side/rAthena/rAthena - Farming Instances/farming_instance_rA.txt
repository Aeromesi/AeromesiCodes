prontera,160,162,4	script	Farming Instance	4_M_EINMINER,{

	//Naming of the Zones, DO-NOT modify unless you know what you're doing!
	.@Zone1$ = "[Farm Zone] ^006400Item Farming^000000";
	.@Zone2$ = "[Farm Zone] ^f4a460Dead Branch^000000";
	.@Zone3$ = "[Farm Zone] ^FF0000Bloody Branch^000000";
	.@Zone4$ = "[Farm Zone] ^FFDF00Gold Farming^000000";
	.@Zone5$ = "[Farm Zone] ^0000FFOridecon/Elunium Farming^000000";
	.@md_namenpc$ = "[ ^551A8B Farmer Joe ^000000 ]";


	mes .@md_namenpc$;
	mes "Hello there "+strcharinfo(0)+".";
	mes "I have the ability to warp you to a far-away land bountiful in multiple rewards.";
	next;
	mes .@md_namenpc$;
	mes "Which Farming Zone would you like to enter?";
	next;
	mes .@md_namenpc$;
	switch(select(""+.@Zone1$+":"+.@Zone2$+":"+.@Zone3$+":"+.@Zone4$+":"+.@Zone5$+":I wish to not enter any zones.")) {

	//==============================================
	//Selection to entering [Farm Zone] Item Farming
	//==============================================
	case 1:
		#ItemHunt = 0;
	if( #ItemRoomDelay > gettimetick(2) ) {
		set .last,#ItemRoomDelay - gettimetick(2);
		set .@min,  .last % ( 24 * 3600 ) % 3600 / (60);
		mes "Wait for ^FF0000"+.@min+" Minutes^000000.";
		close;
	}
	.@instance$ = "Item Farming";

	if (instance_id()) {
		mes "[Farmer Joe]";
		mes "You are already part of an instance.";
		next;
		switch(select("Enter Instance.:Cancel.")) {
		case 1:
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "You don't want to try again?";
			emotion e_sob;
			close;
		}
	} else {
		mes "[Farmer Joe]";
		mes "Would you like to participate in the Item Farming Instance?";
		next;
		switch(select("Create Instance.:Cancel.")) {
		case 1:
			.@create = instance_create(.@instance$);
			if (.@create < 0) {
				mes "[Farmer Joe]";
				switch (.@create) {
					case -1: mes "ERROR: Invalid type."; break;
					case -2: mes "ERROR: Party not found."; break;
					case -3: mes "ERROR: Instance already exists."; break;
					case -4: mes "ERROR: No free instances."; break;
				}
				mes " ";
				mes "Instance creation ^FF0000failed^000000.";
				emotion e_omg;
				close;
			}
			mes "[Farmer Joe]";
			mes "Instance created.";
			mes " ";
			mes "Now entering the instance...";
			next;
//			warp instance_warpall("z@prt"),148,197;
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "Okay. Maybe next time!";
			close;
		}
	}
	.@enter = instance_enter(.@instance$);
	if (.@enter != 0) {
		mes "[Farmer Joe]";
		switch (.@enter) {
			case 1: mes "ERROR: Party not found."; break;
			case 2: mes "ERROR: Party does not have an instance."; break;
			case 3: mes "ERROR: Unknown error."; break;
		}
		mes " ";
		mes "Instance entry ^FF0000failed^000000.";
		emotion e_omg;
		close;
	}
	close;

	//==============================================
	//Selection to entering [Farm Zone] Dead Branch
	//==============================================
	case 2:
		#DBHunt = 0;
	if( #DBRoomDelay > gettimetick(2) ) {
		set .last,#DBRoomDelay - gettimetick(2);
		set .@min,  .last % ( 24 * 3600 ) % 3600 / (60);
		mes "Wait for ^FF0000"+.@min+" Minutes^000000.";
		close;
	}
	.@instance$ = "Dead Branch Farming";

	if (instance_id()) {
		mes "[Farmer Joe]";
		mes "You are already part of an instance.";
		next;
		switch(select("Enter Instance.:Cancel.")) {
		case 1:
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "You don't want to try again?";
			emotion e_sob;
			close;
		}
	} else {
		mes "[Farmer Joe]";
		mes "Would you like to participate in the Dead Branch Farm?";
		next;
		switch(select("Create Instance.:Cancel.")) {
		case 1:
			.@create = instance_create(.@instance$);
			if (.@create < 0) {
				mes "[Farmer Joe]";
				switch (.@create) {
					case -1: mes "ERROR: Invalid type."; break;
					case -2: mes "ERROR: Party not found."; break;
					case -3: mes "ERROR: Instance already exists."; break;
					case -4: mes "ERROR: No free instances."; break;
				}
				mes " ";
				mes "Instance creation ^FF0000failed^000000.";
				emotion e_omg;
				close;
			}
			mes "[Farmer Joe]";
			mes "Instance created.";
			mes " ";
			mes "Now entering the instance...";
			next;
//			warp instance_warpall("z@prt"),148,197;
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "Okay. Maybe next time!";
			close;
		}
	}
	.@enter = instance_enter(.@instance$);
	if (.@enter != 0) {
		mes "[Farmer Joe]";
		switch (.@enter) {
			case 1: mes "ERROR: Party not found."; break;
			case 2: mes "ERROR: Party does not have an instance."; break;
			case 3: mes "ERROR: Unknown error."; break;
		}
		mes " ";
		mes "Instance entry ^FF0000failed^000000.";
		emotion e_omg;
		close;
	}
	close;
	//==============================================
	//Selection to entering [Farm Zone] Bloody Branch
	//==============================================
	case 3:
		#BBHunt = 0;
	if( #BBRoomDelay > gettimetick(2) ) {
		set .last,#BBRoomDelay - gettimetick(2);
		set .@min,  .last % ( 24 * 3600 ) % 3600 / (60);
		mes "Wait for ^FF0000"+.@min+" Minutes^000000.";
		close;
	}
	.@instance$ = "Bloody Branch Farming";

	if (instance_id()) {
		mes "[Farmer Joe]";
		mes "You are already part of an instance.";
		next;
		switch(select("Enter Instance.:Cancel.")) {
		case 1:
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "You don't want to try again?";
			emotion e_sob;
			close;
		}
	} else {
		mes "[Farmer Joe]";
		mes "Would you like to participate in the Bloody Branch Farm?";
		next;
		switch(select("Create Instance.:Cancel.")) {
		case 1:
			.@create = instance_create(.@instance$);
			if (.@create < 0) {
				mes "[Farmer Joe]";
				switch (.@create) {
					case -1: mes "ERROR: Invalid type."; break;
					case -2: mes "ERROR: Party not found."; break;
					case -3: mes "ERROR: Instance already exists."; break;
					case -4: mes "ERROR: No free instances."; break;
				}
				mes " ";
				mes "Instance creation ^FF0000failed^000000.";
				emotion e_omg;
				close;
			}
			mes "[Farmer Joe]";
			mes "Instance created.";
			mes " ";
			mes "Now entering the instance...";
			next;
//			warp instance_warpall("z@prt"),148,197;
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "Okay. Maybe next time!";
			close;
		}
	}
	.@enter = instance_enter(.@instance$);
	if (.@enter != 0) {
		mes "[Farmer Joe]";
		switch (.@enter) {
			case 1: mes "ERROR: Party not found."; break;
			case 2: mes "ERROR: Party does not have an instance."; break;
			case 3: mes "ERROR: Unknown error."; break;
		}
		mes " ";
		mes "Instance entry ^FF0000failed^000000.";
		emotion e_omg;
		close;
	}
	close;
	//==============================================
	//Selection to entering [Farm Zone] Gold Room
	//==============================================
	case 4:
		#GRHunt = 0;
	if( #GRRoomDelay > gettimetick(2) ) {
		set .last,#GRRoomDelay - gettimetick(2);
		set .@min,  .last % ( 24 * 3600 ) % 3600 / (60);
		mes "Wait for ^FF0000"+.@min+" Minutes^000000.";
		close;
	}
	.@instance$ = "Gold Farming";

	if (instance_id()) {
		mes "[Farmer Joe]";
		mes "You are already part of an instance.";
		next;
		switch(select("Enter Instance.:Cancel.")) {
		case 1:
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "You don't want to try again?";
			emotion e_sob;
			close;
		}
	} else {
		mes "[Farmer Joe]";
		mes "Would you like to participate in Gold Farm Instance?";
		next;
		switch(select("Create Instance.:Cancel.")) {
		case 1:
			.@create = instance_create(.@instance$);
			if (.@create < 0) {
				mes "[Farmer Joe]";
				switch (.@create) {
					case -1: mes "ERROR: Invalid type."; break;
					case -2: mes "ERROR: Party not found."; break;
					case -3: mes "ERROR: Instance already exists."; break;
					case -4: mes "ERROR: No free instances."; break;
				}
				mes " ";
				mes "Instance creation ^FF0000failed^000000.";
				emotion e_omg;
				close;
			}
			mes "[Farmer Joe]";
			mes "Instance created.";
			mes " ";
			mes "Now entering the instance...";
			next;
//			warp instance_warpall("z@prt"),148,197;
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "Okay. Maybe next time!";
			close;
		}
	}
	.@enter = instance_enter(.@instance$);
	if (.@enter != 0) {
		mes "[Farmer Joe]";
		switch (.@enter) {
			case 1: mes "ERROR: Party not found."; break;
			case 2: mes "ERROR: Party does not have an instance."; break;
			case 3: mes "ERROR: Unknown error."; break;
		}
		mes " ";
		mes "Instance entry ^FF0000failed^000000.";
		emotion e_omg;
		close;
	}
	close;
	//==============================================
	//Selection to entering [Farm Zone] Oridecon/Elunium Farming
	//==============================================
	case 5:
		#OEHunt = 0;
	if( #OERoomDelay > gettimetick(2) ) {
		set .last,#OERoomDelay - gettimetick(2);
		set .@min,  .last % ( 24 * 3600 ) % 3600 / (60);
		mes "Wait for ^FF0000"+.@min+" Minutes^000000.";
		close;
	}
	.@instance$ = "Oridecon/Elunium Farming";

	if (instance_id()) {
		mes "[Farmer Joe]";
		mes "You are already part of an instance.";
		next;
		switch(select("Enter Instance.:Cancel.")) {
		case 1:
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "You don't want to try again?";
			emotion e_sob;
			close;
		}
	} else {
		mes "[Farmer Joe]";
		mes "Would you like to participate in the Oridecon/Elunium Farming Instance?";
		next;
		switch(select("Create Instance.:Cancel.")) {
		case 1:
			.@create = instance_create(.@instance$);
			if (.@create < 0) {
				mes "[Farmer Joe]";
				switch (.@create) {
					case -1: mes "ERROR: Invalid type."; break;
					case -2: mes "ERROR: Party not found."; break;
					case -3: mes "ERROR: Instance already exists."; break;
					case -4: mes "ERROR: No free instances."; break;
				}
				mes " ";
				mes "Instance creation ^FF0000failed^000000.";
				emotion e_omg;
				close;
			}
			mes "[Farmer Joe]";
			mes "Instance created.";
			mes " ";
			mes "Now entering the instance...";
			next;
//			warp instance_warpall("z@prt"),148,197;
			break;
		case 2:
			mes "[Farmer Joe]";
			mes "Okay. Maybe next time!";
			close;
		}
	}
	.@enter = instance_enter(.@instance$);
	if (.@enter != 0) {
		mes "Farmer Joe]";
		switch (.@enter) {
			case 1: mes "ERROR: Party not found."; break;
			case 2: mes "ERROR: Party does not have an instance."; break;
			case 3: mes "ERROR: Unknown error."; break;
		}
		mes " ";
		mes "Instance entry ^FF0000failed^000000.";
		emotion e_omg;
		close;
	}
	close;

	case 6:
		mes "Alright then, come again another time!";
		close;
	}
}

//=====================================================
/*	
	[Farm Zone] Item Farming

	The item list - Modify 'FarmIDList to according item ID's you want players to receive.
	'ItemRate - The rate at which they obtain items, which is in %. So 50 = 50%.
	.DelayMin - Controls Time Limit of Re-entering: 1 = 1 Minute, 2 = 2 Minute, etc.
	.MaxItemLimit - Max amount of items they can Farm until instance is complete, if they don't reach max amount they just complete the instance.
	'MOB1ID/'MOB2ID - Select the ID of the monster you want.
	'MOB1AM/'MOB2AM - Select the Amount of designated Monsters you want to spawn.
	NOTE: Don't make the .MaxDBLimit exceed the total amount of monsters you selected to spawn. Otherwise, they will never reach the Max Limit.
	All other variables do not touch, especially the Count, and the Start. ('Farm_Count and 'Farm_Start)
*/
//=====================================================
1@def01,45,50,1	script	FarmInstance#Ins	-1,{

OnInstanceInit:
	.DelayMin = 3;
	.MaxItemLimit = 10;
	'ItemRate = 50;
	'MOB1ID = 1533;
	'MOB2ID = 1221;
	'MOB1AM = 40;
	'MOB2AM = 35;
	'MobTOTAL = 'MOB1AM+'MOB2AM;


	'Farm_Count = 0;
	'Farm_Start = 0;

	if (!'Farm_Start) {
		donpcevent instance_npcname("FarmInstance#Ins")+"::OnFarmStart";
		'Farm_Start++;
		end;
	}
OnFarmStart:
	instance_announce -1,"[Farming Instance] Enjoy farming some items!",bc_map;
	monster instance_mapname("1@def01"),50,50,"[ Farm Zone ] Resident",'MOB1ID,'MOB1AM,instance_npcname("FarmInstance#Ins")+"::OnFarmItem";
	monster instance_mapname("1@def01"),50,50,"[ Farm Zone ] Resident",'MOB2ID,'MOB2AM,instance_npcname("FarmInstance#Ins")+"::OnFarmItem";
	end;
OnFarmItem:
	if ( rand(100) < 'ItemRate ) {
		'FarmIDList = callfunc("F_Rand",1129,1222,1163,1357,1360,1522,1811,1410);
		#ItemHunt++;
		'Farm_Count++;
		dispbottom "[ Farm Zone ] : Farmed "+#ItemHunt+" / "+.MaxItemLimit+" Items";
		if( #ItemHunt >= .MaxItemLimit ) {
			getitem 'FarmIDList, 1;
			message strcharinfo(0),"Limit Reach , you may join again later.";
			sleep2 500;
			set #ItemRoomDelay,gettimetick(2) + ( .DelayMin * 60 );
			#ItemHunt = 0;
			warp "prontera",150,150;
			instance_destroy();
			end;
		}
		donpcevent instance_npcname("FarmInstance#Ins")+"::OnCountFarm";;
		getitem 'FarmIDList, 1;
	} else {
		dispbottom "Sorry, you didn't obtain an item! Keep farming!";
		'Farm_Count++;
		donpcevent instance_npcname("FarmInstance#Ins")+"::OnCountFarm";
		end;
	}
		end;
OnCountFarm:
	if ('Farm_Count >= 'MobTOTAL) {

		if( attachrid('aid) )
			if( getcharid(0) == 'cid ) {
				instance_announce -1,"[Farming Instance] Farming instance Completed.",bc_map;
				set #HuntRoomDelay,gettimetick(2) + ( .DelayMin * 60 );
				sleep2 5000;
				instance_destroy();
				end;
			}
			else
				end;
	}
}
//=====================================================
/*
			
			[Farm Zone] Dead Branch
			Information/How-To Setup:
			
	'DBRate - The rate at which they obtain the Dead Branches, which is in %. So 50 = 50%.
	.DBDelayMin - Controls Time Limit of Re-entering: 1 = 1 Minute, 2 = 2 Minute, etc.
	.MaxDBLimit - Max amount of Dead Branches they can Farm until instance is complete, if they don't reach max amount they just complete the instance.
	'MOB1ID/'MOB2ID - Select the ID of the monster you want.
	'MOB1AM/'MOB2AM - Select the Amount of designated Monsters you want to spawn.
	NOTE: Don't make the .MaxDBLimit exceed the total amount of monsters you selected to spawn. Otherwise, they will never reach the Max Limit.
	All other variables do not touch, especially the Count, and the Start. ('Farm_Count and 'Farm_Start)
		
			
*/
//=====================================================
1@spa,195,39,1	script	FarmInstanceDB#Ins	-1,{

OnInstanceInit:
	.DBDelayMin = 3;
	.MaxDBLimit = 10;
	'DBRate = 50;
	'MOB1ID = 1533;
	'MOB2ID = 1534;
	'MOB1AM = 40;
	'MOB2AM = 35;
	'MobTOTAL = 'MOB1AM+'MOB2AM;

	'Farm_Count = 0;
	'Farm_Start = 0;

	if (!'Farm_Start) {
		donpcevent instance_npcname("FarmInstanceDB#Ins")+"::OnDBFarmStart";
		'Farm_Start++;
		end;
	}
OnDBFarmStart:
	instance_announce -1,"[Farming Instance] Enjoy farming some Dead Branches!",bc_map;
	areamonster instance_mapname("1@spa"),17,18,65,67,"[ Farm Zone ] Dead Branch Holder",'MOB1ID,'MOB1AM,instance_npcname("FarmInstanceDB#Ins")+"::OnFarmDB";
	areamonster instance_mapname("1@spa"),17,18,65,67,"[ Farm Zone ] Dead Branch Guest",'MOB2ID,'MOB2AM,instance_npcname("FarmInstanceDB#Ins")+"::OnFarmDB";
	end;
OnFarmDB:
	if ( rand(100) < 'DBRate ) {
//		'FarmIDList = callfunc("F_Rand",1129,1222,1163,1357,1360,1522,1811,1410);
		#DBHunt++;
	//	dispbottom "You obtained an item! Congratulations!";
		'Farm_Count++;
		dispbottom "[ Farm Zone ] : Farmed "+#DBHunt+" / "+.MaxDBLimit+" Dead Branches";
		if( #DBHunt >= .MaxDBLimit ) {
			getitem 604, 1;
			message strcharinfo(0),"Limit Reach , you may join again later.";
			sleep2 500;
			set #DBRoomDelay,gettimetick(2) + ( .DBDelayMin * 60 );
			warp "prontera",150,150;
			instance_destroy();
			end;
		}
		donpcevent instance_npcname("FarmInstanceDB#Ins")+"::OnDBFarmCount";
		getitem 604, 1;
	} else {
		dispbottom "Sorry, you didn't obtain a Dead Branch! Keep farming!";
		'Farm_Count++;
		donpcevent instance_npcname("FarmInstanceDB#Ins")+"::OnDBFarmCount";
		end;
	}
		end;
OnDBFarmCount:
	if ('Farm_Count >= 'MobTOTAL) {

		if( attachrid('aid) )
			if( getcharid(0) == 'cid ) {
				instance_announce -1,"[Farming Instance] Farming instance Completed.",bc_map;
				 #DBRoomDelay = gettimetick(2) + ( .DBDelayMin * 60 );
				sleep2 5000;
				instance_destroy();
				end;
			}
			else
				end;
	}
}
//=====================================================
/*
			
			[Farm Zone] Bloody Branch
			Information/How-To Setup:
			
			'BBRate - The rate at which they obtain the Dead Branches, which is in %. So 50 = 50%.
			.BBDelayMin - Controls Time Limit of Re-entering: 1 = 1 Minute, 2 = 2 Minute, etc.
			.MaxBBLimit - Max amount of Bloody Branches they can Farm until instance is complete, if they don't reach max amount they just complete the instance.
			MOB1ID/MOB2ID - Select the ID of the monster you want.
			MOB1AM/MOB2AM - Select the Amount of designated Monsters you want to spawn.
			NOTE: Don't make the .MaxBBLimit exceed the total amount of monsters you selected to spawn. Otherwise, they will never reach the Max Limit.
			All other variables do not touch, especially the Count, and the Start. ('Farm_Count and 'Farm_Start)
		
			
*/
//=====================================================
1@def03,50,40,1	script	FarmInstanceBB#Ins	-1,{

OnInstanceInit:
	.BBDelayMin = 2;
	.MaxBBLimit = 5;
	'BBRate = 50;
	'MOB1ID = 1533;
	'MOB2ID = 1534;
	'MOB1AM = 40;
	'MOB2AM = 35;
	'MobTOTAL = 'MOB1AM+'MOB2AM;

	'Farm_Count = 0;
	'Farm_Start = 0;

	if (!'Farm_Start) {
		donpcevent instance_npcname("FarmInstanceBB#Ins")+"::OnBBFarmStart";
		'Farm_Start++;
		end;
	}
OnBBFarmStart:
	instance_announce -1,"[Farming Instance] Enjoy farming some Dead Branches!",bc_map;
	monster instance_mapname("1@def03"),0,0,"[ Farm Zone ] Bloody Branch Holder",'MOB1ID,'MOB1AM,instance_npcname("FarmInstanceBB#Ins")+"::OnFarmBB";
	monster instance_mapname("1@def03"),0,0,"[ Farm Zone ] Bloody Branch Guest",'MOB2ID,'MOB2AM,instance_npcname("FarmInstanceBB#Ins")+"::OnFarmBB";
	end;
OnFarmBB:
	if ( rand(100) < 'BBRate ) {
		#BBHunt++;
		'Farm_Count++;
		dispbottom "[ Farm Zone ] : Farmed "+#BBHunt+" / "+.MaxBBLimit+" Bloody Branches";
		if( #BBHunt >= .MaxBBLimit ) {
			getitem 12103, 1;
			message strcharinfo(0),"Limit Reach , you may join again later.";
			sleep2 500;
			set #BBRoomDelay,gettimetick(2) + ( .BBDelayMin * 60 );
			warp "prontera",150,150;
			instance_destroy();
			end;
		}
		donpcevent instance_npcname("FarmInstanceBB#Ins")+"::OnBBFarmCount";
		getitem 12103, 1;
	} else {
		dispbottom "Sorry, you didn't obtain a Bloody Branch! Keep farming!";
		'Farm_Count++;
		donpcevent instance_npcname("FarmInstanceBB#Ins")+"::OnBBFarmCount";
		end;
	}
		end;
OnBBFarmCount:
	if ('Farm_Count >= 'MobTOTAL) {

		if( attachrid('aid) )
			if( getcharid(0) == 'cid ) {
				instance_announce -1,"[Farming Instance] Farming instance Completed.",bc_map;
				 #BBRoomDelay = gettimetick(2) + ( .BBDelayMin * 60 );
				sleep2 5000;
				instance_destroy();
				end;
			}
			else
				end;
	}
}
//=====================================================
/*
			
			[Farm Zone] Gold Room
			Information/How-To Setup:
			
			'GRRate - The rate at which they obtain Gold, which is in %. So 50 = 50%.
			.GRDelayMin - Controls Time Limit of Re-entering: 1 = 1 Minute, 2 = 2 Minute, etc.
			.MaxGRLimit - Max amount of Gold they can Farm until instance is complete, if they don't reach max amount they just complete the instance.
			'MOB1ID/MOB2ID - Select the ID of the monster you want.
			'MOB1AM/MOB2AM - Select the Amount of designated Monsters you want to spawn.
			NOTE: Don't make the .MaxGRLimit exceed the total amount of monsters you selected to spawn. Otherwise, they will never reach the Max Limit.
			All other variables do not touch, especially the Count, and the Start. ('Farm_Count and 'Farm_Start)
		
			
*/
//=====================================================
1@dth1,50,40,1	script	FarmInstanceGR#Ins	-1,{

OnInstanceInit:
	.GRDelayMin = 2;
	.MaxGRLimit = 5;
	'GRRate = 50;
	'MOB1ID = 1533;
	'MOB2ID = 1534;
	'MOB1AM = 40;
	'MOB2AM = 35;
	'MobTOTAL = 'MOB1AM+'MOB2AM;

	'Farm_Count = 0;
	'Farm_Start = 0;

	if (!'Farm_Start) {
		donpcevent instance_npcname("FarmInstanceGR#Ins")+"::OnGRFarmStart";
		'Farm_Start++;
		end;
	}
OnGRFarmStart:
	instance_announce -1,"[Farming Instance] Enjoy farming some Gold!",bc_map;
	monster instance_mapname("1@dth1"),0,0,"[ Farm Zone ] Gold Holder",'MOB1ID,'MOB1AM,instance_npcname("FarmInstanceGR#Ins")+"::OnFarmGR";
	monster instance_mapname("1@dth1"),0,0,"[ Farm Zone ] Gold Guest",'MOB2ID,'MOB2AM,instance_npcname("FarmInstanceGR#Ins")+"::OnFarmGR";
	end;
OnFarmGR:
	if ( rand(100) < 'GRRate ) {
		#GRHunt++;
		'Farm_Count++;
		dispbottom "[ Farm Zone ] : Farmed "+#GRHunt+" / "+.MaxGRLimit+" Gold.";
		if( #GRHunt >= .MaxGRLimit ) {
			getitem 969, 1;
			message strcharinfo(0),"Limit Reach , you may join again later.";
			sleep2 500;
			set #GRRoomDelay,gettimetick(2) + ( .GRDelayMin * 60 );
			warp "prontera",150,150;
			instance_destroy();
			end;
		}
		donpcevent instance_npcname("FarmInstanceGR#Ins")+"::OnGRFarmCount";
		getitem 969, 1;
	} else {
		dispbottom "Sorry, you didn't obtain a Gold! Keep farming!";
		'Farm_Count++;
		donpcevent instance_npcname("FarmInstanceGR#Ins")+"::OnGRFarmCount";
		end;
	}
		end;
OnGRFarmCount:
	if ('Farm_Count >= 'MobTOTAL) {

		if( attachrid('aid) )
			if( getcharid(0) == 'cid ) {
				instance_announce -1,"[Farming Instance] Farming instance Completed.",bc_map;
				 #GRRoomDelay = gettimetick(2) + ( .GRDelayMin * 60 );
				sleep2 5000;
				instance_destroy();
				end;
			}
			else
				end;
	}
}
//=====================================================
/*
			
			[Farm Zone] Oridecon/Elunium 
			Information/How-To Setup:
			
			'OERate - The rate at which they obtain Oridecon or Elunium, which is in %. So 50 = 50%.
			.OEDelayMin - Controls Time Limit of Re-entering: 1 = 1 Minute, 2 = 2 Minute, etc.
			.MaxOELimit - Max amount of Gold they can Farm until instance is complete, if they don't reach max amount they just complete the instance.
			'MOB1ID/MOB2ID - Select the ID of the monster you want.
			'MOB1AM/MOB2AM - Select the Amount of designated Monsters you want to spawn.
			NOTE: Don't make the .MaxOELimit exceed the total amount of monsters you selected to spawn. Otherwise, they will never reach the Max Limit.
			All other variables do not touch, especially the Count, and the Start. ('Farm_Count and 'Farm_Start)
		
			
*/
//=====================================================
1@dth2,50,40,1	script	FarmInstanceOE#Ins	-1,{

OnInstanceInit:
	.OEDelayMin = 2;
	.MaxOELimit = 5;
	'OERate = 50;
	'MOB1ID = 1533;
	'MOB2ID = 1534;
	'MOB1AM = 40;
	'MOB2AM = 35;
	'MobTOTAL = 'MOB1AM+'MOB2AM;

	'Farm_Count = 0;
	'Farm_Start = 0;

	if (!'Farm_Start) {
		donpcevent instance_npcname("FarmInstanceOE#Ins")+"::OnOEFarmStart";
		'Farm_Start++;
		end;
	}
OnOEFarmStart:
	instance_announce -1,"[Farming Instance] Enjoy farming some Oridecon and Elunium!",bc_map;
	monster instance_mapname("1@dth2"),0,0,"[ Farm Zone ] Mineral Holder",'MOB1ID,'MOB1AM,instance_npcname("FarmInstanceOE#Ins")+"::OnFarmOE";
	monster instance_mapname("1@dth2"),0,0,"[ Farm Zone ] Mineral Guest",'MOB2ID,'MOB2AM,instance_npcname("FarmInstanceOE#Ins")+"::OnFarmOE";
	end;
OnFarmOE:
	if ( rand(100) < 'OERate ) {
//		'OEIDList = callfunc("F_Rand",984,985);
		#OEHunt++;
		'Farm_Count++;
		dispbottom "[ Farm Zone ] : Farmed "+#OEHunt+" / "+.MaxOELimit+" Minerals.";
		if( #OEHunt >= .MaxOELimit ) {
		'OEIDList = callfunc("F_Rand",984,985);
		getitem 'OEIDList, 1;
			message strcharinfo(0),"Limit Reach , you may join again later.";
			sleep2 500;
			set #OERoomDelay,gettimetick(2) + ( .OEDelayMin * 60 );
			warp "prontera",150,150;
			instance_destroy();
			end;
		}
		donpcevent instance_npcname("FarmInstanceOE#Ins")+"::OnOEFarmCount";
		'OEIDList = callfunc("F_Rand",984,985);
		getitem 'OEIDList, 1;
	} else {
		dispbottom "Sorry, you didn't obtain an Oridecon or Elunium! Keep farming!";
		'Farm_Count++;
		donpcevent instance_npcname("FarmInstanceOE#Ins")+"::OnOEFarmCount";
		end;
	}
		end;
OnOEFarmCount:
	if ('Farm_Count >= 'MobTOTAL) {

		if( attachrid('aid) )
			if( getcharid(0) == 'cid ) {
				instance_announce -1,"[Farming Instance] Farming instance Completed.",bc_map;
				 #OERoomDelay = gettimetick(2) + ( .OEDelayMin * 60 );
				sleep2 5000;
				instance_destroy();
				end;
			}
			else
				end;
	}
}
