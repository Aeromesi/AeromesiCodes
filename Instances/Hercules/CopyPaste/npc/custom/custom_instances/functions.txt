//////////////////////////////////////////////////////////////////////////////////
// Returns a number with a '-st', '-nd', '-rd', or '-th' suffix.
// -- callfunc "F_GetNumSuffix",<number>
// Examples:
//    callfunc("F_GetNumSuffix",1)   // returns "1st"
//    callfunc("F_GetNumSuffix",11)  // returns "11th"
//    callfunc("F_GetNumSuffix",32)  // returns "32nd"
//////////////////////////////////////////////////////////////////////////////////
function	script	F_GetNumSuffix	{
	set .@n, getarg(0);
	set .@mod, .@n % 10;
	if      (.@mod == 1 && .@n != 11) return .@n+"st";
	else if (.@mod == 2 && .@n != 12) return .@n+"nd";
	else if (.@mod == 3 && .@n != 13) return .@n+"rd";
	else return .@n+"th";
}

function	script	F_GetPlural	{
	set .@str$, getarg(0);

	if (countstr(.@str$," ")) {  // multiple words
		explode(.@tmp$,.@str$," ");
		set .@size, getarraysize(.@tmp$);

		// if format is "... of|in|on ...", pluralize preceding word; else pluralize last word
		if (compare(.@str$," of ") || compare(.@str$," in ") || compare(.@str$," on ")) {
			for (set .@i,1; .@i<.@size; set .@i,.@i+1) {
				if (getstrlen(.@tmp$[.@i]) == 2 && compare("of|in|on",.@tmp$[.@i]))
				break;
				set .@index, .@index + 1;
			}
		} else
		set .@index, .@size - 1;

		set .@str$, .@tmp$[.@index];
		set .@tmp$[.@index],"%s";
		set .@format$, implode(.@tmp$," ");
	} else
	set .@format$, "%s";

	set .@strlen, getstrlen(.@str$);
	if (.@strlen < 3)  // prevent errors
	return ((getarg(1,0)) ? strtoupper(sprintf(.@format$,.@str$)) : sprintf(.@format$,.@str$));

	setarray .@suffix$[0], charat(.@str$,.@strlen - 1), substr(.@str$,.@strlen - 2,.@strlen - 1);
	if (!compare("abcdefghijklmnopqrstuvwxyz",.@suffix$[0])) {  // last character is not a letter
		set .@result$, .@str$;
	}

	// common exceptions --> singular form == plural form
	else if (compare("fish|glasses|sunglasses|clothes|boots|shoes|greaves|sandals|wings|ears",.@str$)) {
		set .@result$, .@str$;
	}

	// ends in -s, -x, -z, -ch, -sh --> add -es
	else if (.@suffix$[0] == "s" || .@suffix$[0] == "x" || .@suffix$[0] == "z" ||
			.@suffix$[1] == "ch" || .@suffix$[1] == "sh") {
		set .@result$, .@str$ + "es";
	}

	// ends in -f, -fe --> remove -f, -fe --> add -ves
	else if ((.@suffix$[0] == "f" || .@suffix$[1] == "fe") && .@suffix$[1] != "ff") {
		if (compare("belief|cliff|chief|dwarf|grief|gulf|proof|roof",.@str$))
		set .@result$, .@str$ + "s";  // exceptions --> add -s
		else
		set .@result$, substr(.@str$,0,.@strlen - 2 - (.@suffix$[1] == "fe")) + "ves";
	}
	
	// ends in consonant + -y --> remove -y --> add -ies
	else if (.@suffix$[0] == "y" && !compare("aeiou",charat(.@suffix$[1],0))) {
		set .@result$, delchar(.@str$,.@strlen - 1) + "ies";
	}

	// ends in -o --> exceptions --> add -es
	else if (.@suffix$[0] == "o" &&
			compare("buffalo|domino|echo|grotto|halo|hero|mango|mosquito|potato|tomato|tornado|torpedo|veto|volcano",.@str$)) {
		set .@result$, .@str$ + "es";
	}

	// default --> add -s
	else {
		set .@result$, .@str$ + "s";
	}

	return ((getarg(1,0)) ? strtoupper(sprintf(.@format$,.@result$)) : sprintf(.@format$,.@result$));
}

function	script	F_InsertPlural	{
	return sprintf(getarg(3,"%d %s"), getarg(0), ((getarg(0) == 1) ? getarg(1) : callfunc("F_GetPlural",getarg(1),getarg(2,0))));
}
function	script	timeleft__	{
	if ( ( .@left = getarg(0) ) <= 0 ) return getarg(0);
	set .@day, .@left / 86400;
	set .@hour, .@left % 86400 / 3600;
	set .@min, .@left % 3600 / 60;
	set .@SEC, .@left % 60;
	if ( .@day )
		return .@day +" day "+ .@hour +" hour";
	else if ( .@hour )
		return .@hour +" hour "+ .@min +" min";
	else if ( .@min )
		return .@min +" min "+ .@SEC +" sec";
	else
		return .@SEC +" sec";
}
function	script	ArrayShuffle	{ // Used for Dicastes & Fiery Fairy Forest Instances
	// Usage: callfunc("ArrayShuffle") - return number;
	// callfunc("ArrayShuffle",n) - initialize array of n numbers
	if(getarg(0,-1) <= 0) {
		if( !getarraysize('ShuffleArray) )
		return -1; // Array is not initialized or nothing left of previous initialized one
		.@i = rand(getarraysize('ShuffleArray));
		.@num = 'ShuffleArray[.@i];
		deletearray 'ShuffleArray[.@i],1;
		return .@num;
	} else {
		for( .@i = 0; .@i < getarg(0); .@i++)
		'ShuffleArray[.@i] = .@i + 1;
		return 1;
	}
	return -1;
}